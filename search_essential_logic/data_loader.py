#!/usr/bin/env python3

import json
import numpy as np
import pandas as pd
import h5py
from loguru import logger

def load_from_hdf5(h5_file):
    """Load flash-card data generated by `generate_hdf5_file.py`.

    Args:
        h5_file (str): Path to the HDF5 file containing flashcard data.

    Returns:
        tuple: A tuple containing:
            - pandas.DataFrame: DataFrame containing flashcard data
            - numpy.ndarray: Matrix of embeddings where each row corresponds to a flashcard

    Raises:
        KeyError: If required HDF5 structure is missing or nid column not found
        ValueError: If data integrity checks fail
        Exception: If any other error occurs during file loading

    Notes:
        The HDF5 file structure should contain:
            - /embeddings: float32 matrix (rows ≡ flashcards)
            - /dataframe_columns/<col>: datasets for every column
            - /nid: dedicated dataset (primary key)
            - /metadata: attributes only (ignored here)
    """
    logger.info(f"Loading data from HDF5 file: {h5_file}")
    try:
        with h5py.File(h5_file, "r") as f:
            # --- Ensure the expected structure exists --------------------
            required_items = {"embeddings", "dataframe_columns", "nid"}
            missing = required_items - set(f.keys())
            if missing:
                msg = f"HDF5 structure error – missing item(s): {missing}"
                logger.error(msg)
                raise KeyError(msg)

            # 1️⃣  Embeddings
            embeddings_np = f["embeddings"][:].astype(np.float32)

            # 2️⃣  Reconstruct DataFrame
            df_data = {}
            for col in f["dataframe_columns"]:
                raw = f["dataframe_columns"][col][:]
                # Decode byte strings → str, leave numerics untouched
                if raw.dtype.kind in {"S", "O"}:
                    raw = [x.decode("utf-8") if isinstance(x, (bytes, np.bytes_)) else str(x) for x in raw]
                df_data[col] = raw
            dataframe = pd.DataFrame(df_data)

            # Must contain nid column
            if "nid" not in dataframe.columns:
                msg = "`nid` column not found inside dataframe_columns group"
                logger.error(msg)
                raise KeyError(msg)

            # 3️⃣  Primary-key dataset
            nid_dataset = [x.decode("utf-8") if isinstance(x, (bytes, np.bytes_)) else str(x)
                           for x in f["nid"][:]]

        # --- Alignment / integrity checks --------------------------------
        errors = []
        if len(dataframe) != embeddings_np.shape[0]:
            errors.append(f"Row count mismatch: dataframe={len(dataframe)} vs embeddings={embeddings_np.shape[0]}")
        if list(dataframe["nid"].astype(str)) != nid_dataset:
            errors.append("`nid` column is not perfectly aligned with /nid dataset")

        if errors:
            msg = " | ".join(errors)
            logger.error(f"Data integrity check FAILED ❌  {msg}")
            raise ValueError(msg)
        else:
            logger.info(f"Data integrity check PASSED ✅  {len(dataframe)} rows aligned")

        logger.info(f"Successfully loaded {len(dataframe)} flashcards and embeddings")
        return dataframe, embeddings_np

    except Exception as e:
        logger.exception(f"Failed to load HDF5 file: {e}")
        raise

def load_searcher_context(config_path):
    """Load flash-card data, embeddings and search-related settings.

    Args:
        config_path (str): Path to the JSON configuration file.

    Returns:
        dict: A dictionary containing:
            - dataframe (pandas.DataFrame): Flashcard data
            - embeddings (numpy.ndarray): Matrix of embeddings
            - top_n_vectors_from_dataframe (int): Number of top vectors to retrieve
            - in_prompt_number (int): Number to use in prompt template
            - personal_LLM_prompt (str): Template for LLM prompt
            - num_wanted_back_from_cohere (int): Number of results to request from Cohere

    Raises:
        json.JSONDecodeError: If config file is not valid JSON
        FileNotFoundError: If config file does not exist
        Exception: If any error occurs during HDF5 file loading
    """
    logger.info(f"Loading flash-card context from {config_path}")
    with open(config_path, "r") as f:
        config = json.load(f)

    dataframe, embeddings = load_from_hdf5(config["myy_hdf5_location"]["h5_file"])

    runtime_config_dictionary = {
        "dataframe": dataframe,
        "embeddings": embeddings,
        "top_n_vectors_from_dataframe": config["myy_settings"]["top_n_vectors_from_dataframe"],
        "in_prompt_number": config["myy_settings"]["in_prompt_number"],
        "personal_LLM_prompt": config["myy_settings"]["personal_LLM_prompt"],
        "num_wanted_back_from_cohere": config["myy_settings"]["num_wanted_back_from_cohere"],
    }
    logger.info("Flash-card context ready")
    return runtime_config_dictionary 